diff -uNr linux.vanilla/arch/x86/Kconfig linux.patch/arch/x86/Kconfig
--- linux.vanilla/arch/x86/Kconfig	2008-09-27 17:25:59.000000000 +1000
+++ linux.patch/arch/x86/Kconfig	2008-12-08 13:32:40.000000000 +1100
@@ -1729,3 +1729,5 @@
 source "arch/x86/kvm/Kconfig"
 
 source "lib/Kconfig"
+
+source "lemona/Kconfig"
diff -uNr linux.vanilla/arch/x86/mm/fault.c linux.patch/arch/x86/mm/fault.c
--- linux.vanilla/arch/x86/mm/fault.c	2008-09-27 17:25:59.000000000 +1000
+++ linux.patch/arch/x86/mm/fault.c	2008-12-08 13:32:51.000000000 +1100
@@ -723,6 +723,8 @@
 good_area:
 	si_code = SEGV_ACCERR;
 	write = 0;
+	/* LEMONA: if we are responsible for this fault,
+	   up_read(mm->mmap_sem) and return */
 	switch (error_code & (PF_PROT|PF_WRITE)) {
 	default:	/* 3: write, present */
 		/* fall through */
@@ -770,6 +772,7 @@
 	}
 #endif
 	up_read(&mm->mmap_sem);
+	/* LEMONA: if this was the first page_fault, log read data */
 	return;
 
 /*
diff -uNr linux.vanilla/fs/namei.c linux.patch/fs/namei.c
--- linux.vanilla/fs/namei.c	2008-09-27 17:26:10.000000000 +1000
+++ linux.patch/fs/namei.c	2008-12-18 16:33:47.000000000 +1100
@@ -34,6 +34,9 @@
 #include <asm/namei.h>
 #include <asm/uaccess.h>
 
+#include "../lemona/lemona_patch.h"
+
+
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
 /* [Feb-1997 T. Schoebel-Theuer]
@@ -2091,12 +2094,20 @@
 	struct dentry * dentry;
 	struct nameidata nd;
 
+        lemona_block_start {
+		lemona_log_in(__NR_mknodat, 4, 0, &dfd, filename, &mode, &dev);
+        } lemona_block_end;
 	if (S_ISDIR(mode))
-		return -EPERM;
+	  {
+	    error = -EPERM;
+	    goto end;
+	  }
 	tmp = getname(filename);
 	if (IS_ERR(tmp))
-		return PTR_ERR(tmp);
-
+	  {
+	    error = PTR_ERR(tmp);
+	    goto end;
+	  }
 	error = do_path_lookup(dfd, tmp, LOOKUP_PARENT, &nd);
 	if (error)
 		goto out;
@@ -2133,7 +2144,10 @@
 	path_put(&nd.path);
 out:
 	putname(tmp);
-
+end:
+        lemona_block_start {
+		lemona_log_out(__NR_mknodat, 1, 0, &error);
+        } lemona_block_end;
 	return error;
 }
 
@@ -2171,6 +2185,9 @@
 	struct dentry *dentry;
 	struct nameidata nd;
 
+        lemona_block_start {
+		lemona_log_in(__NR_mkdirat, 3, 0, &dfd, pathname, &mode);
+        } lemona_block_end;
 	tmp = getname(pathname);
 	error = PTR_ERR(tmp);
 	if (IS_ERR(tmp))
@@ -2199,12 +2216,15 @@
 out:
 	putname(tmp);
 out_err:
+        lemona_block_start {
+		lemona_log_out(__NR_mkdirat, 1, 0, &error);
+        } lemona_block_end;
 	return error;
 }
 
 asmlinkage long sys_mkdir(const char __user *pathname, int mode)
 {
-	return sys_mkdirat(AT_FDCWD, pathname, mode);
+        return sys_mkdirat(AT_FDCWD, pathname, mode);
 }
 
 /*
@@ -2316,7 +2336,16 @@
 
 asmlinkage long sys_rmdir(const char __user *pathname)
 {
-	return do_rmdir(AT_FDCWD, pathname);
+	long	retval;
+
+        lemona_block_start {
+		lemona_log_in(__NR_rmdir, 1, 0, pathname);
+        } lemona_block_end;
+	retval = do_rmdir(AT_FDCWD, pathname);
+        lemona_block_start {
+		lemona_log_out(__NR_rmdir, 1, 0, &retval);
+        } lemona_block_end;
+	return retval;
 }
 
 int vfs_unlink(struct inode *dir, struct dentry *dentry)
@@ -2409,13 +2438,22 @@
 
 asmlinkage long sys_unlinkat(int dfd, const char __user *pathname, int flag)
 {
+        long	retval = 0;
+
+        lemona_block_start {
+	  lemona_log_in(__NR_unlinkat, 3, 0, &dfd, pathname, &flag);
+	} lemona_block_end;
 	if ((flag & ~AT_REMOVEDIR) != 0)
 		return -EINVAL;
 
 	if (flag & AT_REMOVEDIR)
 		return do_rmdir(dfd, pathname);
 
-	return do_unlinkat(dfd, pathname);
+	retval = do_unlinkat(dfd, pathname);
+	lemona_block_start {
+	  lemona_log_out(__NR_unlinkat, 1, 0, &retval);
+	} lemona_block_end;
+	return (retval);
 }
 
 asmlinkage long sys_unlink(const char __user *pathname)
@@ -2453,14 +2491,19 @@
 	struct dentry *dentry;
 	struct nameidata nd;
 
+        lemona_block_start {
+		lemona_log_in(__NR_symlinkat, 3, 0, oldname, &newdfd, newname);
+        } lemona_block_end;
 	from = getname(oldname);
 	if(IS_ERR(from))
-		return PTR_ERR(from);
+	  {
+		error = PTR_ERR(from);
+		goto end;
+	  }
 	to = getname(newname);
 	error = PTR_ERR(to);
 	if (IS_ERR(to))
 		goto out_putname;
-
 	error = do_path_lookup(newdfd, to, LOOKUP_PARENT, &nd);
 	if (error)
 		goto out;
@@ -2483,12 +2526,25 @@
 	putname(to);
 out_putname:
 	putname(from);
+end:
+        lemona_block_start {
+		lemona_log_out(__NR_symlinkat, 1, 0, &error);
+        } lemona_block_end;
 	return error;
 }
 
 asmlinkage long sys_symlink(const char __user *oldname, const char __user *newname)
 {
-	return sys_symlinkat(oldname, AT_FDCWD, newname);
+	long	retval;
+
+        lemona_block_start {
+		lemona_log_in(__NR_symlink, 2, 0, oldname, newname);
+        } lemona_block_end;
+	retval = sys_symlinkat(oldname, AT_FDCWD, newname);
+        lemona_block_start {
+		lemona_log_out(__NR_symlink, 1, 0, &retval);
+        } lemona_block_end;
+	return retval;
 }
 
 int vfs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *new_dentry)
@@ -2547,12 +2603,21 @@
 	int error;
 	char * to;
 
+	lemona_block_start {
+	  lemona_log_in(__NR_linkat, 5, 0, &olddfd, oldname, &newdfd, newname, &flags);
+	} lemona_block_end;
 	if ((flags & ~AT_SYMLINK_FOLLOW) != 0)
-		return -EINVAL;
+	  {
+	    error = -EINVAL;
+	    goto end;
+	  }
 
 	to = getname(newname);
 	if (IS_ERR(to))
-		return PTR_ERR(to);
+	  {
+	    error = PTR_ERR(to);
+	    goto end;
+	  }
 
 	error = __user_walk_fd(olddfd, oldname,
 			       flags & AT_SYMLINK_FOLLOW ? LOOKUP_FOLLOW : 0,
@@ -2584,7 +2649,10 @@
 	path_put(&old_nd.path);
 exit:
 	putname(to);
-
+end:
+	lemona_block_start {
+	  lemona_log_out(__NR_linkat, 1, 0, &error);
+	} lemona_block_end;
 	return error;
 }
 
@@ -2827,9 +2895,14 @@
 	char * from;
 	char * to;
 
+	lemona_block_start {
+		lemona_log_in(__NR_renameat, 4, 0, &olddfd, oldname, &newdfd, newname);
+	} lemona_block_end;
 	from = getname(oldname);
-	if(IS_ERR(from))
-		return PTR_ERR(from);
+	if(IS_ERR(from)) {
+		error = PTR_ERR(from);
+		goto end;
+	}
 	to = getname(newname);
 	error = PTR_ERR(to);
 	if (!IS_ERR(to)) {
@@ -2837,6 +2910,10 @@
 		putname(to);
 	}
 	putname(from);
+end:
+	lemona_block_start {
+		lemona_log_out(__NR_renameat, 1, 0, &error);
+	} lemona_block_end;
 	return error;
 }
 
diff -uNr linux.vanilla/fs/open.c linux.patch/fs/open.c
--- linux.vanilla/fs/open.c	2008-09-27 17:26:11.000000000 +1000
+++ linux.patch/fs/open.c	2008-12-18 16:33:38.000000000 +1100
@@ -30,6 +30,8 @@
 #include <linux/audit.h>
 #include <linux/falloc.h>
 
+#include "../lemona/lemona_patch.h"
+
 int vfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
 	int retval = -ENODEV;
@@ -1110,7 +1112,24 @@
 	if (force_o_largefile())
 		flags |= O_LARGEFILE;
 
+	lemona_block_start {
+	  lemona_log_in(__NR_open, 3, 0, filename, &flags, &mode);
+	} lemona_block_end;
+
 	ret = do_sys_open(AT_FDCWD, filename, flags, mode);
+
+	/*
+	 * This should always be before asmlinkage_protect!
+	 *
+	 * We pass ret twice:
+	 *  - The first time to get the return value.
+	 *  - The second time to get the resolved filename (if fd >= 0)
+	 *
+	 */
+	lemona_block_start {
+	  lemona_log_out(__NR_open, 1, 1, &ret, &ret);
+	} lemona_block_end;
+
 	/* avoid REGPARM breakage on x86: */
 	asmlinkage_protect(3, ret, filename, flags, mode);
 	return ret;
@@ -1124,7 +1143,17 @@
 	if (force_o_largefile())
 		flags |= O_LARGEFILE;
 
+	lemona_block_start {
+	  lemona_log_in(__NR_openat, 4, 0, &dfd, filename, &flags, &mode);
+	} lemona_block_end;
+
+
 	ret = do_sys_open(dfd, filename, flags, mode);
+
+	lemona_block_start {
+	  lemona_log_out(__NR_openat, 1, 1, &ret, &ret);
+	} lemona_block_end;
+
 	/* avoid REGPARM breakage on x86: */
 	asmlinkage_protect(4, ret, dfd, filename, flags, mode);
 	return ret;
@@ -1177,7 +1206,11 @@
 	struct file * filp;
 	struct files_struct *files = current->files;
 	struct fdtable *fdt;
-	int retval;
+	int retval = -EBADF;
+
+	lemona_block_start {
+	  lemona_log_in(__NR_close, 1, 0, &fd);
+	} lemona_block_end;
 
 	spin_lock(&files->file_lock);
 	fdt = files_fdtable(files);
@@ -1199,11 +1232,16 @@
 		     retval == -ERESTART_RESTARTBLOCK))
 		retval = -EINTR;
 
-	return retval;
+	goto out;
 
 out_unlock:
 	spin_unlock(&files->file_lock);
-	return -EBADF;
+out:
+	lemona_block_start {
+	  lemona_log_out(__NR_close, 1, 0, &retval);
+	} lemona_block_end;
+
+	return retval;
 }
 
 EXPORT_SYMBOL(sys_close);
diff -uNr linux.vanilla/fs/read_write.c linux.patch/fs/read_write.c
--- linux.vanilla/fs/read_write.c	2008-09-27 17:26:11.000000000 +1000
+++ linux.patch/fs/read_write.c	2008-12-18 16:33:27.000000000 +1100
@@ -21,6 +21,9 @@
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 
+#define LEMONA_READ
+#include "../lemona/lemona_patch.h"
+
 const struct file_operations generic_ro_fops = {
 	.llseek		= generic_file_llseek,
 	.read		= do_sync_read,
@@ -133,9 +136,17 @@
 	off_t retval;
 	struct file * file;
 	int fput_needed;
+#if defined(LEMONA)
+	bool lemona_file = false;
+#endif
 
 	retval = -EBADF;
 	file = fget_light(fd, &fput_needed);
+	lemona_block_start {
+	  if (file == NULL
+	      || !(lemona_file = lemona_relay_is_ours(file->f_dentry)))
+	    lemona_log_in(__NR_lseek, 3, 0, &fd, &offset, &origin);
+	} lemona_block_end;
 	if (!file)
 		goto bad;
 
@@ -148,6 +159,10 @@
 	}
 	fput_light(file, fput_needed);
 bad:
+	lemona_block_start {
+	  if (lemona_file == false)
+	    lemona_log_out(__NR_lseek, 1, 0, &retval);
+	} lemona_block_end;
 	return retval;
 }
 
@@ -160,9 +175,20 @@
 	struct file * file;
 	loff_t offset;
 	int fput_needed;
+#if defined(LEMONA)
+	bool lemona_file = false;
+#endif
 
 	retval = -EBADF;
 	file = fget_light(fd, &fput_needed);
+
+	lemona_block_start {
+	  if (file == NULL
+	      || !(lemona_file = lemona_relay_is_ours(file->f_dentry)))
+	    lemona_log_in(__NR__llseek, 4, 0, &fd,
+			  &offset_high, &offset_low, &origin);
+	} lemona_block_end;
+
 	if (!file)
 		goto bad;
 
@@ -182,6 +208,10 @@
 out_putf:
 	fput_light(file, fput_needed);
 bad:
+	lemona_block_start {
+	  offset = retval == 0 ? offset : retval; /* for LEMONA */
+	  lemona_log_out(__NR__llseek, 1, 0, &offset);
+	} lemona_block_end;
 	return retval;
 }
 #endif
@@ -355,15 +385,30 @@
 	struct file *file;
 	ssize_t ret = -EBADF;
 	int fput_needed;
+#if defined(LEMONA)
+	bool lemona_file = false;
+#endif
 
 	file = fget_light(fd, &fput_needed);
+
+	lemona_block_start {
+	  if (file == NULL
+	      || !(lemona_file = lemona_relay_is_ours(file->f_dentry)))
+	    lemona_log_in(__NR_read, 2, 0, &fd, &count);
+	} lemona_block_end;
+
 	if (file) {
 		loff_t pos = file_pos_read(file);
 		ret = vfs_read(file, buf, count, &pos);
 		file_pos_write(file, pos);
 		fput_light(file, fput_needed);
+
 	}
 
+	lemona_block_start {
+	  if (lemona_file == false)
+	    lemona_log_out(__NR_read, 2, 0, buf, &ret);
+	} lemona_block_end;
 	return ret;
 }
 
@@ -373,6 +418,10 @@
 	ssize_t ret = -EBADF;
 	int fput_needed;
 
+	lemona_block_start {
+	  lemona_log_in(__NR_write, 3, 0, &fd, buf, &count);
+	} lemona_block_end;
+
 	file = fget_light(fd, &fput_needed);
 	if (file) {
 		loff_t pos = file_pos_read(file);
@@ -381,6 +430,9 @@
 		fput_light(file, fput_needed);
 	}
 
+	lemona_block_start {
+	  lemona_log_out(__NR_write, 1, 0, &ret);
+	} lemona_block_end;
 	return ret;
 }
 
@@ -390,18 +442,33 @@
 	struct file *file;
 	ssize_t ret = -EBADF;
 	int fput_needed;
+#if defined(LEMONA)
+	bool lemona_file = false;
+#endif
 
-	if (pos < 0)
-		return -EINVAL;
+	if (pos >= 0) {
+		file = fget_light(fd, &fput_needed);
 
-	file = fget_light(fd, &fput_needed);
-	if (file) {
-		ret = -ESPIPE;
-		if (file->f_mode & FMODE_PREAD)
-			ret = vfs_read(file, buf, count, &pos);
-		fput_light(file, fput_needed);
+		lemona_block_start {
+		  if (file == NULL
+		      || !(lemona_file = lemona_relay_is_ours(file->f_dentry)))
+		    lemona_log_in(__NR_pread64, 3, 0, &fd, &count, &pos);
+		} lemona_block_end;
+
+		if (file) {
+			ret = -ESPIPE;
+			if (file->f_mode & FMODE_PREAD)
+				ret = vfs_read(file, buf, count, &pos);
+			fput_light(file, fput_needed);
+		}
 	}
+	else
+		ret = -EINVAL;
 
+	lemona_block_start {
+	  if (lemona_file == false)
+	    lemona_log_out(__NR_pread64, 2, 0, buf, &ret);
+	} lemona_block_end;
 	return ret;
 }
 
@@ -412,17 +479,25 @@
 	ssize_t ret = -EBADF;
 	int fput_needed;
 
-	if (pos < 0)
-		return -EINVAL;
-
-	file = fget_light(fd, &fput_needed);
-	if (file) {
-		ret = -ESPIPE;
-		if (file->f_mode & FMODE_PWRITE)  
-			ret = vfs_write(file, buf, count, &pos);
-		fput_light(file, fput_needed);
+	lemona_block_start {
+	  lemona_log_in(__NR_pwrite64, 4, 0, &fd, buf, &count, &pos);
+	} lemona_block_end;
+
+	if (pos >= 0) {
+		file = fget_light(fd, &fput_needed);
+		if (file) {
+			ret = -ESPIPE;
+			if (file->f_mode & FMODE_PWRITE)
+				ret = vfs_write(file, buf, count, &pos);
+			fput_light(file, fput_needed);
+		}
 	}
+	else
+		ret = -EINVAL;
 
+	lemona_block_start {
+	  lemona_log_out(__NR_pwrite64, 1, 0, &ret);
+	} lemona_block_end;
 	return ret;
 }
 
@@ -659,8 +734,18 @@
 	struct file *file;
 	ssize_t ret = -EBADF;
 	int fput_needed;
+#if defined(LEMONA)
+	bool lemona_file = false;
+#endif
 
 	file = fget_light(fd, &fput_needed);
+
+	lemona_block_start {
+	  if (file == NULL
+	      || !(lemona_file = lemona_relay_is_ours(file->f_dentry)))
+	    lemona_log_in(__NR_readv, 1, 0, &fd);
+	} lemona_block_end;
+
 	if (file) {
 		loff_t pos = file_pos_read(file);
 		ret = vfs_readv(file, vec, vlen, &pos);
@@ -671,6 +756,11 @@
 	if (ret > 0)
 		add_rchar(current, ret);
 	inc_syscr(current);
+
+	lemona_block_start {
+	  if (lemona_file == false)
+	    lemona_log_out(__NR_readv, 3, 0, &ret, vec, vlen);
+	} lemona_block_end;
 	return ret;
 }
 
@@ -681,6 +771,10 @@
 	ssize_t ret = -EBADF;
 	int fput_needed;
 
+	lemona_block_start {
+	  lemona_log_in(__NR_writev, 3, 0, &fd, vec, &vlen);
+	} lemona_block_end;
+
 	file = fget_light(fd, &fput_needed);
 	if (file) {
 		loff_t pos = file_pos_read(file);
@@ -692,6 +786,10 @@
 	if (ret > 0)
 		add_wchar(current, ret);
 	inc_syscw(current);
+
+	lemona_block_start {
+	  lemona_log_out(__NR_writev, 1, 0, &ret);
+	} lemona_block_end;
 	return ret;
 }
 
diff -uNr linux.vanilla/init/main.c linux.patch/init/main.c
--- linux.vanilla/init/main.c	2008-09-27 17:26:15.000000000 +1000
+++ linux.patch/init/main.c	2008-12-08 13:33:03.000000000 +1100
@@ -107,6 +107,11 @@
 enum system_states system_state;
 EXPORT_SYMBOL(system_state);
 
+#if defined(CONFIG_LEMONA_MODULE) || defined(CONFIG_LEMONA)
+atomic_t	lemona_activated	= ATOMIC_INIT(0);
+EXPORT_SYMBOL(lemona_activated);
+#endif
+
 /*
  * Boot command-line arguments
  */
@@ -808,6 +813,31 @@
 	(void) sys_dup(0);
 	(void) sys_dup(0);
 
+#if defined(CONFIG_LEMONA) && defined(CONFIG_LEMONA_NET_LOG)
+	/*
+	 * This is supposed to read the user passphrase and store it
+	 * so data send over the network will be encrypted.
+	 *
+	 * TODO: store the passphrase
+	 */
+	if (atomic_read(&lemona_activated) != 0)
+	  {
+		int	rd;
+		char	pass[512];
+
+		memset(pass, 0, 512);
+		printk("-==LEMONA==-" "Please enter your passphrase: ");
+		rd = sys_read(0, pass, 511);
+		if (rd > 0)
+		  {
+			pass[rd - 1] = 0; /* get rid of the newline */
+			printk("-==LEMONA==-" "Passphrase: %i - '%s'\n", rd, pass);
+		  }
+		else
+		  printk("-==LEMONA==-" "Failed to read passphrase: %i\n", rd);
+	  }
+#endif
+
 	current->signal->flags |= SIGNAL_UNKILLABLE;
 
 	if (ramdisk_execute_command) {
diff -uNr linux.vanilla/kernel/sched.c linux.patch/kernel/sched.c
--- linux.vanilla/kernel/sched.c	2008-09-27 17:26:16.000000000 +1000
+++ linux.patch/kernel/sched.c	2008-12-08 13:33:16.000000000 +1100
@@ -4188,6 +4188,8 @@
 	next = pick_next_task(rq, prev);
 
 	if (likely(prev != next)) {
+
+	  /* LEMONA (schedule): Reset protect flag and log write if needed */
 		sched_info_switch(prev, next);
 
 		rq->nr_switches++;
diff -uNr linux.vanilla/Makefile linux.patch/Makefile
--- linux.vanilla/Makefile	2008-09-27 17:26:00.000000000 +1000
+++ linux.patch/Makefile	2008-12-08 13:30:53.000000000 +1100
@@ -454,6 +454,7 @@
 net-y		:= net/
 libs-y		:= lib/
 core-y		:= usr/
+lemona-y	:= lemona/
 endif # KBUILD_EXTMOD
 
 ifeq ($(dot-config),1)
@@ -611,7 +612,7 @@
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
-		     $(net-y) $(net-m) $(libs-y) $(libs-m)))
+		     $(net-y) $(net-m) $(libs-y) $(libs-m) $(lemona-y)))
 
 vmlinux-alldirs	:= $(sort $(vmlinux-dirs) $(patsubst %/,%,$(filter %/, \
 		     $(init-n) $(init-) \
@@ -625,6 +626,7 @@
 libs-y1		:= $(patsubst %/, %/lib.a, $(libs-y))
 libs-y2		:= $(patsubst %/, %/built-in.o, $(libs-y))
 libs-y		:= $(libs-y1) $(libs-y2)
+lemona-y	:=  $(patsubst %/, %/built-in.o, $(lemona-y))
 
 # Build vmlinux
 # ---------------------------------------------------------------------------
@@ -654,7 +656,7 @@
 # System.map is generated to document addresses of all kernel symbols
 
 vmlinux-init := $(head-y) $(init-y)
-vmlinux-main := $(core-y) $(libs-y) $(drivers-y) $(net-y)
+vmlinux-main := $(core-y) $(libs-y) $(drivers-y) $(net-y) $(lemona-y)
 vmlinux-all  := $(vmlinux-init) $(vmlinux-main)
 vmlinux-lds  := arch/$(SRCARCH)/kernel/vmlinux.lds
 export KBUILD_VMLINUX_OBJS := $(vmlinux-all)
diff -uNr linux.vanilla/mm/mmap.c linux.patch/mm/mmap.c
--- linux.vanilla/mm/mmap.c	2008-09-27 17:26:16.000000000 +1000
+++ linux.patch/mm/mmap.c	2008-12-08 13:33:25.000000000 +1100
@@ -1130,8 +1130,8 @@
 	 */
 	if (!file && !(vm_flags & VM_SHARED) &&
 	    vma_merge(mm, prev, addr, addr + len, vm_flags,
-					NULL, NULL, pgoff, NULL))
-		goto out;
+		      NULL, NULL, pgoff, NULL))
+	  goto out;
 
 	/*
 	 * Determine the object being mapped and call the appropriate
@@ -1218,6 +1218,7 @@
 	}
 	if ((flags & MAP_POPULATE) && !(flags & MAP_NONBLOCK))
 		make_pages_present(addr, addr + len);
+	/* LEMONA (mmap): save the vma addr here if file != NULL */
 	return addr;
 
 unmap_and_free_vma:
@@ -1785,6 +1786,7 @@
 		mm->map_count--;
 		tail_vma = vma;
 		vma = vma->vm_next;
+		/* LEMONA (unmap): we need to log read/written data */
 	} while (vma && vma->vm_start < end);
 	*insertion_point = vma;
 	tail_vma->vm_next = NULL;
